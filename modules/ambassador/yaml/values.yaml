# https://github.com/datawire/ambassador/tree/master/charts/ambassador

licenseKey:
  value: ${licenseKey}
  annotations: {}
  createSecret: true
metrics:
  serviceMonitor:
    enabled: ${promEnabled}

image:
  repository: docker.io/datawire/aes
  tag: 1.12.2
  pullPolicy: IfNotPresent

replicaCount: 1

volumes:
  - name: lightstep-secret-volume
    secret:
      secretName: lightstep-access-token

volumeMounts:
  - name: lightstep-secret-volume
    mountPath: /etc/lightstep-access-token

resources:
  limits:
    cpu: 300m
    memory: 512Mi
  requests:
    cpu: 20m
    memory: 256Mi
adminService:
  annotations: {}
  create: true
  port: 8877
  type: NodePort
service:
  annotations:
    #   service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    #   service.beta.kubernetes.io/do-loadbalancer-hostname: "do.wetsnow.com"
    #   service.beta.kubernetes.io/do-loadbalancer-algorithm: "least_connections"
    #   service.beta.kubernetes.io/do-loadbalancer-protocol: "tcp"
    # kubernetes.io/ingress.global-static-ip-name: "ambassador"
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "ambassador-hc-config"}'
    cloud.google.com/app-protocols: '{"grpc": "HTTP2"}'
  externalIPs: []
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    - name: grpc
      port: 8443
      targetPort: 8443
    # - name: minecraft
    #   port: 25565
    #   targetPort: 25565
  # type: LoadBalancer
  type: NodePort
  # This breaks on GKE, perhaps healthCheckNodePort is needed?
  # externalTrafficPolicy: Cluster
  # externalTrafficPolicy: Local
env:
  AMBASSADOR_LEGACY_MODE: false
  # https://docs.datadoghq.com/integrations/ambassador/
  STATSD_ENABLED: true
  DOGSTATSD: true
  # STATSD_HOST: "localhost"

envRaw:
  - name: STATSD_HOST
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP

redis:
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

agent:
  enabled: false

%{ if !gke  }
nodeSelector:
  # kind cluster
  ingress-ready: "true"

# allow running on master node in kind cluster
tolerations:
  - key: "node-role.kubernetes.io/master"
    effect: "NoSchedule"
    operator: "Exists"
%{ endif }

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 6
  failureThreshold: 6

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 6
  failureThreshold: 6
