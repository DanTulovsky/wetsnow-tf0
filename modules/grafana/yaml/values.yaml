# https://github.com/grafana/helm-charts/tree/main/charts/grafana
replicas: 1

podDisruptionBudget:
  minAvailable: 1

image:
  pullPolicy: IfNotPresent
  repository: grafana/grafana
  sha: ""
  tag: ${app_version}

deploymentStrategy:
  type: "Recreate"

podLabels:
  # match the span service.name
  service.name: "grafana"
  service.version: ${app_version}

resources:
  limits:
    cpu: 100m
    memory: 256Mi
  requests:
    cpu: 10m
    memory: 128Mi

service:
  type: ClusterIP
  port: 80
  targetPort:
    "grafana"
  # targetPort: 4181 To be used with a proxy extraContainer
  annotations: { }
  labels: { "service": "grafana" }
  portName: service

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"

serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  enabled: false  # we use our own so that podTargetLabels can be set

persistence:
  enabled: true

# Use an existing secret for the admin user.
admin:
  existingSecret: "grafana-admin"
  userKey: admin-user
  passwordKey: admin-password

## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc. Value is templated.
#envFromSecret: "grafana-env-secret"
## Pass the plugins you want installed as a list.
##
plugins:
  - grafana-piechart-panel
  - grafana-worldmap-panel
  - andig-darksky-datasource
  - ayoungprogrammer-finance-datasource
  - lightstep-metrics-datasource

## Configure grafana datasources
datasources:
  datasources.yaml:
    deleteDatasources:
      - name: Prometheus
        orgId: 1
      - name: LightstepMetrics
        orgId: 1
      - name: Lightstep
        orgId: 1
#    datasources:
#      - name: Lightstep-Metrics
#        type: Lightstep Metrics
#        # TODO: #2 Make this field dynamic in grafana config.
#        url: http://prom0-kube-prometheus-prometheus:9090
#        access: proxy
#        isDefault: true
## Configure notifiers
notifiers:
  notifiers.yaml:
    notifiers:
      - name: email-notifier
        type: email
        uid: email1
        # either:
        org_id: 1
        # or
        # org_name: Main Org.
        is_default: true
        settings:
          addresses: dant@wetsnow.com
    delete_notifiers:
## Configure grafana dashboard providers
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: "default"
        orgId: 1
        folder: ""
        type: file
        disableDeletion: false
        allowUiUpdates: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
# Configure grafana dashboard to import
# NOTE: To use dashboards you must also enable/configure dashboardProviders
# ref: https://grafana.com/dashboards
#
# dashboards per provider, use provider name as key.
#
#dashboards:
#  default:
#    go-grpc1:
#      gnetId: 9186
#      revision: 4
#      datasource: LightstepMetrics
#    gRPC-go:
#      gnetId: 14765
#      revision: 3
#      datasource: LightstepMetrics
#    ambassador:
#      gnetId: 10434
#      revision: 1
#      datasource: LightstepMetrics
#    node-exporter:
#      gnetId: 1860
#      revision: 21
#      datasource: LightstepMetrics
#    k8s-11454:
#      gnetId: 11454
#      revision: 14
#      datasource: LightstepMetrics
#    k8s-11455:
#      gnetId: 11455
#      revision: 6
#      datasource: LightstepMetrics
#    k8s-cluster:
#      gnetId: 7249
#      revision: 1
#      datasource: LightstepMetrics
#    k8s-cluster-3:
#      gnetId: 6417
#      revision: 1
#      datasource: LightstepMetrics
#    k8s-cluster-pods:
#      gnetId: 6663
#      revision: 1
#      datasource: LightstepMetrics
#    k8s-cluster-resources:
#      gnetId: 7187
#      revision: 1
#      datasource: LightstepMetrics
#    k8s-cluster-pv:
#      gnetId: 6739
#      revision: 1
#      datasource: LightstepMetrics
#    k8s-deployment:
#      gnetId: 741
#      revision: 1
#      datasource: LightstepMetrics
#    k8s-app-metrics:
#      gnetId: 1471
#      revision: 1
#      datasource: LightstepMetrics
#    prometheus-overview:
#      gnetId: 3662
#      revision: 2
#      datasource: LightstepMetrics
#      tag: prometheus
#    otel-collector:
#      gnetId: 12553
#      revision: 1
#      datasource: LightstepMetrics
## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  smtp:
    enabled: true
    host: "smtp.sendgrid.net:465"
    from_address: "grafana@wetsnow.com"
    from_name: "Grafana"
  server:
    # The full public facing url you use in browser, used for redirects and emails
    root_url: https://grafana.wetsnow.com
    enable_gzip: true
  plugins:
    allow_loading_unsigned_plugins: "grafana-lightstep-datasource,grafana-lightstep-graph,lightstep-metrics-datasource,lightstep-app,grafana-kubernetes-datasource,prometheus-kubernetes-nodeinfo-panel,prometheus-kubernetes-podnav-panel,grafana-kubernetes-app"
    plugin_admin_enabled: true
    enable_alpha: true
  #  auth:
  #    oauth_auto_login: false
  #    signout_redirect_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/logout?redirect_uri=https%3A%2F%2Flogin.wetsnow.com%2Fauth%2Frealms%2Fwetsnow%2Faccount%2F%23%2F"
  #  auth.generic_oauth:
  #    enabled: true
  #    name: "Keycloak"
  #    allow_sign_up: false
  #    auth_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/auth"
  #    token_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/token"
  #    api_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/userinfo"
  #    scopes: "email profile"
  #    # TODO: #3 Figure out why this breaks terraform
  #    # role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
  #  remote_cache:
  #    type: "database"
  #  database:
  #    type: postgres
  #    # host: pgsql-postgresql.db:5432
  #    host: db1.gke-internal.wetsnow.com:5432
  #    name: grafana
  #    user: grafana
  #    log_queries: false
  #    ssl_mode: disable
  #    conn_max_lifetime: 2000
  #    max_open_conn: 300
  #    max_idle_conn: 2
  tracing.jaeger:
    # env used below
    address: otel-collector.observability:6831
    sampler_type: const
    sampler_param: 1
    sampling_server_url: http://otel-collector.observability:5778/sampling
    zipkin_propagation: true
  dataproxy:
    expect_continue_timeout_seconds: 10
    logging: true
env:
  # JAEGER_AGENT_HOST: "jaeger-agent.observability"
  JAEGER_AGENT_HOST: otel-collector.observability
  JAEGER_AGENT_PORT: 6831
  JAEGER_SERVICE_NAME: grafana

## Grafana's SMTP configuration
## NOTE: To enable, grafana.ini must be configured with smtp.enabled
## ref: http://docs.grafana.org/installation/configuration/#smtp
smtp:
  # `existingSecret` is a reference to an existing secret containing the smtp configuration
  # for Grafana.
  existingSecret: "grafana-smtp"
  userKey: "user"
  passwordKey: "password"

namespaceOverride: "monitoring"
