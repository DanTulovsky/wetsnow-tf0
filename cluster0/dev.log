RAW provider 2021/03/05 13:07:47 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:07:47 Finished
RAW provider 2021/03/05 13:07:56 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:07:56 Finished
RAW provider 2021/03/05 13:08:29 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:08:29 Finished
RAW provider 2021/03/05 13:08:37 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:08:37 Finished
RAW provider 2021/03/05 13:08:38 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:08:39 Finished
RAW provider 2021/03/05 13:09:17 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:17 Finished
RAW provider 2021/03/05 13:09:17 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:18 Finished
RAW provider 2021/03/05 13:09:19 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:19 [Configure] Failed to load config:
(*clientcmd.DeferredLoadingClientConfig)(0xc0002fe460)({
 loader: (*clientcmd.ClientConfigLoadingRules)(0xc0002fe410)({
  ExplicitPath: (string) "",
  Precedence: ([]string) <nil>,
  MigrationRules: (map[string]string) <nil>,
  DoNotResolvePaths: (bool) false,
  DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
  WarnIfAllMissing: (bool) false
 }),
 overrides: (*clientcmd.ConfigOverrides)(0xc0003406c0)({
  AuthInfo: (api.AuthInfo) {
   LocationOfOrigin: (string) "",
   ClientCertificate: (string) "",
   ClientCertificateData: ([]uint8) <nil>,
   ClientKey: (string) "",
   ClientKeyData: ([]uint8) <nil>,
   Token: (string) "",
   TokenFile: (string) "",
   Impersonate: (string) "",
   ImpersonateGroups: ([]string) <nil>,
   ImpersonateUserExtra: (map[string][]string) <nil>,
   Username: (string) "",
   Password: (string) "",
   AuthProvider: (*api.AuthProviderConfig)(<nil>),
   Exec: (*api.ExecConfig)(<nil>),
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterDefaults: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterInfo: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  Context: (api.Context) {
   LocationOfOrigin: (string) "",
   Cluster: (string) "",
   AuthInfo: (string) "",
   Namespace: (string) "",
   Extensions: (map[string]runtime.Object) <nil>
  },
  CurrentContext: (string) "",
  Timeout: (string) ""
 }),
 fallbackReader: (io.Reader) <nil>,
 clientConfig: (*clientcmd.DirectClientConfig)(0xc00015e000)({
  config: (api.Config) {
   Kind: (string) "",
   APIVersion: (string) "",
   Preferences: (api.Preferences) {
    Colors: (bool) false,
    Extensions: (map[string]runtime.Object) {
    }
   },
   Clusters: (map[string]*api.Cluster) {
   },
   AuthInfos: (map[string]*api.AuthInfo) {
   },
   Contexts: (map[string]*api.Context) {
   },
   CurrentContext: (string) "",
   Extensions: (map[string]runtime.Object) {
   }
  },
  contextName: (string) "",
  overrides: (*clientcmd.ConfigOverrides)(0xc0003406c0)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) "",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  fallbackReader: (io.Reader) <nil>,
  configAccess: (*clientcmd.ClientConfigLoadingRules)(0xc0002fe410)({
   ExplicitPath: (string) "",
   Precedence: ([]string) <nil>,
   MigrationRules: (map[string]string) <nil>,
   DoNotResolvePaths: (bool) false,
   DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
   WarnIfAllMissing: (bool) false
  }),
  promptedCredentials: (clientcmd.promptedCredentials) {
   username: (string) "",
   password: (string) ""
  }
 }),
 loadingLock: (sync.Mutex) {
  state: (int32) 0,
  sema: (uint32) 0
 },
 icc: (*clientcmd.inClusterClientConfig)(0xc000102390)({
  overrides: (*clientcmd.ConfigOverrides)(0xc0003406c0)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) "",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  inClusterConfigProvider: (func() (*rest.Config, error)) <nil>
 })
})

RAW provider 2021/03/05 13:09:19 Finished
RAW provider 2021/03/05 13:09:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:27 Finished
RAW provider 2021/03/05 13:09:27 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:28 Finished
RAW provider 2021/03/05 13:09:28 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:28 [Configure] Failed to load config:
(*clientcmd.DeferredLoadingClientConfig)(0xc00007f900)({
 loader: (*clientcmd.ClientConfigLoadingRules)(0xc00007f8b0)({
  ExplicitPath: (string) "",
  Precedence: ([]string) <nil>,
  MigrationRules: (map[string]string) <nil>,
  DoNotResolvePaths: (bool) false,
  DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
  WarnIfAllMissing: (bool) false
 }),
 overrides: (*clientcmd.ConfigOverrides)(0xc000342900)({
  AuthInfo: (api.AuthInfo) {
   LocationOfOrigin: (string) "",
   ClientCertificate: (string) "",
   ClientCertificateData: ([]uint8) <nil>,
   ClientKey: (string) "",
   ClientKeyData: ([]uint8) <nil>,
   Token: (string) "",
   TokenFile: (string) "",
   Impersonate: (string) "",
   ImpersonateGroups: ([]string) <nil>,
   ImpersonateUserExtra: (map[string][]string) <nil>,
   Username: (string) "",
   Password: (string) "",
   AuthProvider: (*api.AuthProviderConfig)(<nil>),
   Exec: (*api.ExecConfig)(<nil>),
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterDefaults: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterInfo: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  Context: (api.Context) {
   LocationOfOrigin: (string) "",
   Cluster: (string) "",
   AuthInfo: (string) "",
   Namespace: (string) "",
   Extensions: (map[string]runtime.Object) <nil>
  },
  CurrentContext: (string) "",
  Timeout: (string) ""
 }),
 fallbackReader: (io.Reader) <nil>,
 clientConfig: (*clientcmd.DirectClientConfig)(0xc0004bc780)({
  config: (api.Config) {
   Kind: (string) "",
   APIVersion: (string) "",
   Preferences: (api.Preferences) {
    Colors: (bool) false,
    Extensions: (map[string]runtime.Object) {
    }
   },
   Clusters: (map[string]*api.Cluster) {
   },
   AuthInfos: (map[string]*api.AuthInfo) {
   },
   Contexts: (map[string]*api.Context) {
   },
   CurrentContext: (string) "",
   Extensions: (map[string]runtime.Object) {
   }
  },
  contextName: (string) "",
  overrides: (*clientcmd.ConfigOverrides)(0xc000342900)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) "",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  fallbackReader: (io.Reader) <nil>,
  configAccess: (*clientcmd.ClientConfigLoadingRules)(0xc00007f8b0)({
   ExplicitPath: (string) "",
   Precedence: ([]string) <nil>,
   MigrationRules: (map[string]string) <nil>,
   DoNotResolvePaths: (bool) false,
   DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
   WarnIfAllMissing: (bool) false
  }),
  promptedCredentials: (clientcmd.promptedCredentials) {
   username: (string) "",
   password: (string) ""
  }
 }),
 loadingLock: (sync.Mutex) {
  state: (int32) 0,
  sema: (uint32) 0
 },
 icc: (*clientcmd.inClusterClientConfig)(0xc0004ab400)({
  overrides: (*clientcmd.ConfigOverrides)(0xc000342900)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) "",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  inClusterConfigProvider: (func() (*rest.Config, error)) <nil>
 })
})

RAW provider 2021/03/05 13:09:29 Finished
RAW provider 2021/03/05 13:09:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:42 Finished
RAW provider 2021/03/05 13:09:43 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:43 Finished
RAW provider 2021/03/05 13:09:51 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:51 Finished
RAW provider 2021/03/05 13:09:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:52 Finished
RAW provider 2021/03/05 13:09:53 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:09:53 [Configure] Failed to load config:
(*clientcmd.DeferredLoadingClientConfig)(0xc00007e6e0)({
 loader: (*clientcmd.ClientConfigLoadingRules)(0xc00007e690)({
  ExplicitPath: (string) "",
  Precedence: ([]string) <nil>,
  MigrationRules: (map[string]string) <nil>,
  DoNotResolvePaths: (bool) false,
  DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
  WarnIfAllMissing: (bool) false
 }),
 overrides: (*clientcmd.ConfigOverrides)(0xc000125200)({
  AuthInfo: (api.AuthInfo) {
   LocationOfOrigin: (string) "",
   ClientCertificate: (string) "",
   ClientCertificateData: ([]uint8) <nil>,
   ClientKey: (string) "",
   ClientKeyData: ([]uint8) <nil>,
   Token: (string) (len=235) "ya29.c.KqgB9geF4O9tRHIoDOU4sl8cof4KQO-uEDw8hk8VdsQkTvSwI_0nwN6xQ7z-Rg2sannOxoaGDWPc82LC_-9cAZZsCraHLjtlBWza3sYJh_Nz6lwZtQtwqDMVeADY6eR0qgo9CR1qOVvd2xsox1VVZc7WK9rKuHqbePO3GzGeQFA0tOo_EsvVc-LAdr8yIQJCykn6ij7QyYbF00UIIi95SC3gyAkjl4pQDsTx",
   TokenFile: (string) "",
   Impersonate: (string) "",
   ImpersonateGroups: ([]string) <nil>,
   ImpersonateUserExtra: (map[string][]string) <nil>,
   Username: (string) "",
   Password: (string) "",
   AuthProvider: (*api.AuthProviderConfig)(<nil>),
   Exec: (*api.ExecConfig)(<nil>),
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterDefaults: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  ClusterInfo: (api.Cluster) {
   LocationOfOrigin: (string) "",
   Server: (string) "",
   TLSServerName: (string) "",
   InsecureSkipTLSVerify: (bool) false,
   CertificateAuthority: (string) "",
   CertificateAuthorityData: ([]uint8) <nil>,
   Extensions: (map[string]runtime.Object) <nil>
  },
  Context: (api.Context) {
   LocationOfOrigin: (string) "",
   Cluster: (string) "",
   AuthInfo: (string) "",
   Namespace: (string) "",
   Extensions: (map[string]runtime.Object) <nil>
  },
  CurrentContext: (string) "",
  Timeout: (string) ""
 }),
 fallbackReader: (io.Reader) <nil>,
 clientConfig: (*clientcmd.DirectClientConfig)(0xc00017e180)({
  config: (api.Config) {
   Kind: (string) "",
   APIVersion: (string) "",
   Preferences: (api.Preferences) {
    Colors: (bool) false,
    Extensions: (map[string]runtime.Object) {
    }
   },
   Clusters: (map[string]*api.Cluster) {
   },
   AuthInfos: (map[string]*api.AuthInfo) {
   },
   Contexts: (map[string]*api.Context) {
   },
   CurrentContext: (string) "",
   Extensions: (map[string]runtime.Object) {
   }
  },
  contextName: (string) "",
  overrides: (*clientcmd.ConfigOverrides)(0xc000125200)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) (len=235) "ya29.c.KqgB9geF4O9tRHIoDOU4sl8cof4KQO-uEDw8hk8VdsQkTvSwI_0nwN6xQ7z-Rg2sannOxoaGDWPc82LC_-9cAZZsCraHLjtlBWza3sYJh_Nz6lwZtQtwqDMVeADY6eR0qgo9CR1qOVvd2xsox1VVZc7WK9rKuHqbePO3GzGeQFA0tOo_EsvVc-LAdr8yIQJCykn6ij7QyYbF00UIIi95SC3gyAkjl4pQDsTx",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  fallbackReader: (io.Reader) <nil>,
  configAccess: (*clientcmd.ClientConfigLoadingRules)(0xc00007e690)({
   ExplicitPath: (string) "",
   Precedence: ([]string) <nil>,
   MigrationRules: (map[string]string) <nil>,
   DoNotResolvePaths: (bool) false,
   DefaultClientConfig: (clientcmd.ClientConfig) <nil>,
   WarnIfAllMissing: (bool) false
  }),
  promptedCredentials: (clientcmd.promptedCredentials) {
   username: (string) "",
   password: (string) ""
  }
 }),
 loadingLock: (sync.Mutex) {
  state: (int32) 0,
  sema: (uint32) 0
 },
 icc: (*clientcmd.inClusterClientConfig)(0xc0005d6490)({
  overrides: (*clientcmd.ConfigOverrides)(0xc000125200)({
   AuthInfo: (api.AuthInfo) {
    LocationOfOrigin: (string) "",
    ClientCertificate: (string) "",
    ClientCertificateData: ([]uint8) <nil>,
    ClientKey: (string) "",
    ClientKeyData: ([]uint8) <nil>,
    Token: (string) (len=235) "ya29.c.KqgB9geF4O9tRHIoDOU4sl8cof4KQO-uEDw8hk8VdsQkTvSwI_0nwN6xQ7z-Rg2sannOxoaGDWPc82LC_-9cAZZsCraHLjtlBWza3sYJh_Nz6lwZtQtwqDMVeADY6eR0qgo9CR1qOVvd2xsox1VVZc7WK9rKuHqbePO3GzGeQFA0tOo_EsvVc-LAdr8yIQJCykn6ij7QyYbF00UIIi95SC3gyAkjl4pQDsTx",
    TokenFile: (string) "",
    Impersonate: (string) "",
    ImpersonateGroups: ([]string) <nil>,
    ImpersonateUserExtra: (map[string][]string) <nil>,
    Username: (string) "",
    Password: (string) "",
    AuthProvider: (*api.AuthProviderConfig)(<nil>),
    Exec: (*api.ExecConfig)(<nil>),
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterDefaults: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   ClusterInfo: (api.Cluster) {
    LocationOfOrigin: (string) "",
    Server: (string) "",
    TLSServerName: (string) "",
    InsecureSkipTLSVerify: (bool) false,
    CertificateAuthority: (string) "",
    CertificateAuthorityData: ([]uint8) <nil>,
    Extensions: (map[string]runtime.Object) <nil>
   },
   Context: (api.Context) {
    LocationOfOrigin: (string) "",
    Cluster: (string) "",
    AuthInfo: (string) "",
    Namespace: (string) "",
    Extensions: (map[string]runtime.Object) <nil>
   },
   CurrentContext: (string) "",
   Timeout: (string) ""
  }),
  inClusterConfigProvider: (func() (*rest.Config, error)) <nil>
 })
})

RAW provider 2021/03/05 13:09:54 Finished
RAW provider 2021/03/05 13:10:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:10:44 Finished
RAW provider 2021/03/05 13:10:45 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:10:45 Finished
RAW provider 2021/03/05 13:10:46 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:10:46 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:10:47 Finished
RAW provider 2021/03/05 13:10:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:10:59 Finished
RAW provider 2021/03/05 13:11:00 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:11:00 Finished
RAW provider 2021/03/05 13:11:01 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:11:01 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:11:01 Finished
RAW provider 2021/03/05 13:11:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:11:06 Finished
RAW provider 2021/03/05 13:11:07 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:11:07 Finished
RAW provider 2021/03/05 13:11:08 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:11:08 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:11:09 Finished
RAW provider 2021/03/05 13:13:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:13:30 Finished
RAW provider 2021/03/05 13:13:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:13:42 Finished
RAW provider 2021/03/05 13:13:46 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:13:46 Finished
RAW provider 2021/03/05 13:13:47 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:13:47 Finished
RAW provider 2021/03/05 13:14:27 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:14:27 Finished
RAW provider 2021/03/05 13:14:28 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:14:28 Finished
RAW provider 2021/03/05 13:14:29 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:14:29 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:14:30 Finished
RAW provider 2021/03/05 13:15:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:15:04 Finished
RAW provider 2021/03/05 13:15:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:15:05 Finished
RAW provider 2021/03/05 13:15:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:15:33 Finished
RAW provider 2021/03/05 13:15:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:15:34 Finished
RAW provider 2021/03/05 13:15:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:15:59 Finished
RAW provider 2021/03/05 13:16:00 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:16:00 Finished
RAW provider 2021/03/05 13:16:09 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:16:09 Finished
RAW provider 2021/03/05 13:16:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:16:41 Finished
RAW provider 2021/03/05 13:17:39 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:17:39 Finished
RAW provider 2021/03/05 13:17:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:17:42 Finished
RAW provider 2021/03/05 13:17:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:17:43 Finished
RAW provider 2021/03/05 13:18:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:18:41 Finished
RAW provider 2021/03/05 13:18:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:18:42 Finished
RAW provider 2021/03/05 13:18:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:18:43 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:18:43 Finished
RAW provider 2021/03/05 13:19:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:19:06 Finished
RAW provider 2021/03/05 13:19:07 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:19:08 Finished
RAW provider 2021/03/05 13:21:45 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:21:45 Finished
RAW provider 2021/03/05 13:21:46 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:21:47 Finished
RAW provider 2021/03/05 13:22:43 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:22:43 Finished
RAW provider 2021/03/05 13:22:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:22:44 Finished
RAW provider 2021/03/05 13:22:45 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:22:45 Finished
RAW provider 2021/03/05 13:23:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:23:42 Finished
RAW provider 2021/03/05 13:23:43 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:23:43 Finished
RAW provider 2021/03/05 13:23:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:23:44 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:23:45 Finished
RAW provider 2021/03/05 13:23:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:23:55 Finished
RAW provider 2021/03/05 13:23:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:23:56 Finished
RAW provider 2021/03/05 13:23:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:23:57 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:23:57 Finished
RAW provider 2021/03/05 13:24:09 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:24:09 Finished
RAW provider 2021/03/05 13:24:10 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:24:11 Finished
RAW provider 2021/03/05 13:27:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:27:06 Finished
RAW provider 2021/03/05 13:27:07 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:27:07 Finished
RAW provider 2021/03/05 13:27:21 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:27:21 Finished
RAW provider 2021/03/05 13:27:22 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:27:22 Finished
RAW provider 2021/03/05 13:27:23 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:27:23 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:27:24 Finished
RAW provider 2021/03/05 13:33:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:33:12 Finished
RAW provider 2021/03/05 13:33:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:33:13 Finished
RAW provider 2021/03/05 13:33:13 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:34:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:34:06 Finished
RAW provider 2021/03/05 13:34:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:34:57 Finished
RAW provider 2021/03/05 13:34:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:34:58 Finished
RAW provider 2021/03/05 13:34:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:35:00 Finished
RAW provider 2021/03/05 13:35:46 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:35:46 Finished
RAW provider 2021/03/05 13:35:47 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:35:47 Finished
RAW provider 2021/03/05 13:35:48 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:35:48 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:35:49 Finished
RAW provider 2021/03/05 13:36:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:36:52 Finished
RAW provider 2021/03/05 13:36:53 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:36:53 Finished
RAW provider 2021/03/05 13:36:54 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:36:54 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:36:55 Finished
RAW provider 2021/03/05 13:37:11 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:37:11 Finished
RAW provider 2021/03/05 13:37:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:37:12 Finished
RAW provider 2021/03/05 13:37:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:37:13 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:37:14 Finished
RAW provider 2021/03/05 13:37:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:37:31 Finished
RAW provider 2021/03/05 13:37:32 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:37:32 Finished
RAW provider 2021/03/05 13:37:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:37:33 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:37:35 Finished
RAW provider 2021/03/05 13:42:19 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:42:19 Finished
RAW provider 2021/03/05 13:42:20 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:42:20 Finished
RAW provider 2021/03/05 13:42:21 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:42:21 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:42:24 Finished
RAW provider 2021/03/05 13:43:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:34 Finished
RAW provider 2021/03/05 13:43:34 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:35 Finished
RAW provider 2021/03/05 13:43:35 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:35 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:43:37 Finished
RAW provider 2021/03/05 13:43:43 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:43 Finished
RAW provider 2021/03/05 13:43:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:45 Finished
RAW provider 2021/03/05 13:43:45 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:45 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 13:43:47 Finished
RAW provider 2021/03/05 13:43:50 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 13:43:50 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "kafka"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "kafka"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=6) "vector"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=6) "vector"
   }
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc0085dda38)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=3) "uid": (string) (len=36) "10a01a41-eec3-4ea5-99f0-19dd20654e5b",
   (string) (len=15) "resourceVersion": (string) (len=4) "2725",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:30Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"kafka\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:30Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     }
    }
   },
   (string) (len=4) "name": (string) (len=5) "kafka",
   (string) (len=8) "selfLink": (string) (len=24) "/api/v1/namespaces/kafka"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"kafka\"}}\n"
   },
   (string) (len=4) "name": (string) (len=5) "kafka"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1"
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "kafka"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"kafka\"}}\n"
    },
    (string) (len=4) "name": (string) (len=5) "kafka"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc00b07e320)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=4) "name": (string) (len=6) "vector",
   (string) (len=8) "selfLink": (string) (len=25) "/api/v1/namespaces/vector",
   (string) (len=3) "uid": (string) (len=36) "0fceaada-71ec-48db-a525-8e1065d6e306",
   (string) (len=15) "resourceVersion": (string) (len=4) "2731",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:30Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=85) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"vector\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:30Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     }
    }
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=6) "vector",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=85) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"vector\"}}\n"
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=6) "vector"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=6) "vector",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=85) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"vector\"}}\n"
    }
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "poker"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "poker"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=4) "auth"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=4) "auth"
   }
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=3) "web"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=3) "web"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=13) "observability"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=13) "observability"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "monitoring"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "monitoring"
   }
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=2) "db"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=2) "db"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "ambassador"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "ambassador"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc00fd52f18)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  },
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=3) "uid": (string) (len=36) "6642efdc-7165-4eb6-ad3f-54f10b563609",
   (string) (len=15) "resourceVersion": (string) (len=4) "2713",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:30Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"poker\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:30Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     }
    }
   },
   (string) (len=4) "name": (string) (len=5) "poker",
   (string) (len=8) "selfLink": (string) (len=24) "/api/v1/namespaces/poker"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"poker\"}}\n"
   },
   (string) (len=4) "name": (string) (len=5) "poker"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1"
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "poker"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"poker\"}}\n"
    },
    (string) (len=4) "name": (string) (len=5) "poker"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=8) "loadtest"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=8) "loadtest"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc00fd52fb0)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:29Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=83) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"auth\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:29Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update"
    }
   },
   (string) (len=4) "name": (string) (len=4) "auth",
   (string) (len=8) "selfLink": (string) (len=23) "/api/v1/namespaces/auth",
   (string) (len=3) "uid": (string) (len=36) "6f27e47d-b18a-47a0-bf93-a6880aeb3dac",
   (string) (len=15) "resourceVersion": (string) (len=4) "2693"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=83) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"auth\"}}\n"
   },
   (string) (len=4) "name": (string) (len=4) "auth"
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=4) "auth"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=83) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"auth\"}}\n"
    },
    (string) (len=4) "name": (string) (len=4) "auth"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba3760)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=15) "resourceVersion": (string) (len=4) "2703",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:30Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=82) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"web\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:30Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply"
    }
   },
   (string) (len=4) "name": (string) (len=3) "web",
   (string) (len=8) "selfLink": (string) (len=22) "/api/v1/namespaces/web",
   (string) (len=3) "uid": (string) (len=36) "bfeabbf2-6369-4ed9-8159-879110e6993f"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  },
  (string) (len=4) "kind": (string) (len=9) "Namespace"
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=82) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"web\"}}\n"
   },
   (string) (len=4) "name": (string) (len=3) "web"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=3) "web"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=82) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"web\"}}\n"
    },
    (string) (len=4) "name": (string) (len=3) "web"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba37f8)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=4) "name": (string) (len=2) "db",
   (string) (len=8) "selfLink": (string) (len=21) "/api/v1/namespaces/db",
   (string) (len=3) "uid": (string) (len=36) "e11fc840-2fd8-456a-a553-ef2574a075b7",
   (string) (len=15) "resourceVersion": (string) (len=4) "2698",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:29Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=81) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"db\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:29Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      },
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      }
     }
    }
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=81) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"db\"}}\n"
   },
   (string) (len=4) "name": (string) (len=2) "db"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=2) "db"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=2) "db",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=81) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"db\"}}\n"
    }
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba3890)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:29Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"monitoring\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:29Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     }
    }
   },
   (string) (len=4) "name": (string) (len=10) "monitoring",
   (string) (len=8) "selfLink": (string) (len=29) "/api/v1/namespaces/monitoring",
   (string) (len=3) "uid": (string) (len=36) "6fb5121b-fd49-44a7-b865-e9e568477b6b",
   (string) (len=15) "resourceVersion": (string) (len=4) "2681"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=10) "monitoring",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"monitoring\"}}\n"
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1"
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=10) "monitoring",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"monitoring\"}}\n"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "monitoring"
   }
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba3928)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=13) "managedFields": ([]interface {}) (len=2 cap=2) {
    (map[string]interface {}) (len=6) {
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:38:42Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=14) "kube-apiserver",
     (string) (len=9) "operation": (string) (len=6) "Update"
    },
    (map[string]interface {}) (len=6) {
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:29Z"
    }
   },
   (string) (len=4) "name": (string) (len=7) "default",
   (string) (len=8) "selfLink": (string) (len=26) "/api/v1/namespaces/default",
   (string) (len=3) "uid": (string) (len=36) "be381cc2-fea6-4e0a-a968-3037b5dc8791",
   (string) (len=15) "resourceVersion": (string) (len=4) "2678",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:38:42Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  },
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1"
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
   },
   (string) (len=4) "name": (string) (len=7) "default"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1"
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
    },
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba39c0)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=4) "name": (string) (len=10) "ambassador",
   (string) (len=8) "selfLink": (string) (len=29) "/api/v1/namespaces/ambassador",
   (string) (len=3) "uid": (string) (len=36) "9855dbb5-e3c6-4df6-9125-3356be4f3a9b",
   (string) (len=15) "resourceVersion": (string) (len=4) "2686",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:29Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"ambassador\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:29Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1"
    }
   }
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"ambassador\"}}\n"
   },
   (string) (len=4) "name": (string) (len=10) "ambassador"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1"
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "ambassador"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"ambassador\"}}\n"
    },
    (string) (len=4) "name": (string) (len=10) "ambassador"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba3a58)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:30Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=92) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"observability\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:30Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1"
    }
   },
   (string) (len=4) "name": (string) (len=13) "observability",
   (string) (len=8) "selfLink": (string) (len=32) "/api/v1/namespaces/observability",
   (string) (len=3) "uid": (string) (len=36) "989c5205-ada6-4217-a647-8ea836404d44",
   (string) (len=15) "resourceVersion": (string) (len=4) "2718"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  },
  (string) (len=4) "kind": (string) (len=9) "Namespace"
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=92) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"observability\"}}\n"
   },
   (string) (len=4) "name": (string) (len=13) "observability"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=9) "Namespace"
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=92) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"observability\"}}\n"
    },
    (string) (len=4) "name": (string) (len=13) "observability"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=13) "observability"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  }
 }
}
RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc010ba3af0)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=5) "phase": (string) (len=6) "Active"
  },
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=3) "uid": (string) (len=36) "f331c426-b739-4a8d-92c9-36d278bc6c7e",
   (string) (len=15) "resourceVersion": (string) (len=4) "2708",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:43:30Z",
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=87) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"loadtest\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:43:30Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        },
        (string) (len=1) ".": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=1) {
       (string) (len=7) "f:phase": (map[string]interface {}) {
       }
      }
     }
    }
   },
   (string) (len=4) "name": (string) (len=8) "loadtest",
   (string) (len=8) "selfLink": (string) (len=27) "/api/v1/namespaces/loadtest"
  }
 }
})

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=10) "kubernetes"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=9) "Namespace",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=87) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"loadtest\"}}\n"
   },
   (string) (len=4) "name": (string) (len=8) "loadtest"
  }
 }
}

RAW provider 2021/03/05 14:06:17 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=8) "loadtest"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=8) "loadtest",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=87) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"loadtest\"}}\n"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/03/05 14:07:49 Finished
RAW provider 2021/03/05 14:13:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:13:04 Finished
RAW provider 2021/03/05 14:13:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:13:05 Finished
RAW provider 2021/03/05 14:13:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:13:07 Finished
RAW provider 2021/03/05 14:13:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:13:33 Finished
RAW provider 2021/03/05 14:13:34 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:13:34 Finished
RAW provider 2021/03/05 14:14:27 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:14:27 Finished
RAW provider 2021/03/05 14:14:28 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:14:28 Finished
RAW provider 2021/03/05 14:15:03 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:03 Finished
RAW provider 2021/03/05 14:15:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:04 Finished
RAW provider 2021/03/05 14:15:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:05 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:15:10 Finished
RAW provider 2021/03/05 14:15:16 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:16 Finished
RAW provider 2021/03/05 14:15:17 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:17 Finished
RAW provider 2021/03/05 14:15:17 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:18 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:15:22 Finished
RAW provider 2021/03/05 14:15:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:15:32 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "poker"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"poker\"}}\n"
    },
    (string) (len=4) "name": (string) (len=5) "poker"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  }
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=2) "db"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=81) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"db\"}}\n"
    },
    (string) (len=4) "name": (string) (len=2) "db"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=4) "auth"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=83) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"auth\"}}\n"
    },
    (string) (len=4) "name": (string) (len=4) "auth"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=5) "kafka"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=84) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"kafka\"}}\n"
    },
    (string) (len=4) "name": (string) (len=5) "kafka"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=13) "observability"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=13) "observability",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=92) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"observability\"}}\n"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "monitoring"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"monitoring\"}}\n"
    },
    (string) (len=4) "name": (string) (len=10) "monitoring"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
    },
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=82) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"web\"}}\n"
    },
    (string) (len=4) "name": (string) (len=3) "web"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=3) "web"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  }
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=10) "ambassador"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=89) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"ambassador\"}}\n"
    },
    (string) (len=4) "name": (string) (len=10) "ambassador"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=6) "vector"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=6) "vector",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=85) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"vector\"}}\n"
    }
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=8) "loadtest"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=8) "loadtest",
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=87) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"loadtest\"}}\n"
    }
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=6) "labels": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "service": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=5) {
          (string) (len=9) "clusterIP": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=5) "ports": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=8) "protocol": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=10) "targetPort": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "selector": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=15) "sessionAffinity": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "type": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=6) "labels": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "service": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=5) {
          (string) (len=9) "clusterIP": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=5) "ports": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=4) "port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=8) "protocol": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=10) "targetPort": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "selector": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=15) "sessionAffinity": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "type": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=5) {
    (string) (len=4) "type": (string) (len=9) "ClusterIP",
    (string) (len=9) "clusterIP": (string) (len=4) "None",
    (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=4) {
      (string) (len=4) "port": (*big.Float)(0xc00397db00)(8080),
      (string) (len=8) "protocol": (string) (len=3) "TCP",
      (string) (len=10) "targetPort": (string) (len=4) "http",
      (string) (len=4) "name": (string) (len=4) "http"
     }
    },
    (string) (len=8) "selector": (map[string]interface {}) (len=3) {
     (string) (len=4) "tier": (string) (len=10) "production",
     (string) (len=3) "app": (string) (len=10) "static-web",
     (string) (len=9) "component": (string) (len=8) "frontend"
    },
    (string) (len=15) "sessionAffinity": (string) (len=4) "None"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=7) "Service",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=6) "labels": (map[string]interface {}) (len=4) {
     (string) (len=9) "component": (string) (len=8) "frontend",
     (string) (len=7) "service": (string) (len=19) "static-web-frontend",
     (string) (len=4) "tier": (string) (len=10) "production",
     (string) (len=3) "app": (string) (len=10) "static-web"
    },
    (string) (len=4) "name": (string) (len=19) "static-web-frontend",
    (string) (len=9) "namespace": (string) (len=3) "web"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=5) {
    (string) (len=4) "type": (string) (len=9) "ClusterIP",
    (string) (len=9) "clusterIP": (string) (len=4) "None",
    (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=4) {
      (string) (len=4) "name": (string) (len=4) "http",
      (string) (len=4) "port": (*big.Float)(0xc003acd0b0)(8080),
      (string) (len=8) "protocol": (string) (len=3) "TCP",
      (string) (len=10) "targetPort": (string) (len=4) "http"
     }
    },
    (string) (len=8) "selector": (map[string]interface {}) (len=3) {
     (string) (len=3) "app": (string) (len=10) "static-web",
     (string) (len=9) "component": (string) (len=8) "frontend",
     (string) (len=4) "tier": (string) (len=10) "production"
    },
    (string) (len=15) "sessionAffinity": (string) (len=4) "None"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=7) "Service",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=6) "labels": (map[string]interface {}) (len=4) {
     (string) (len=4) "tier": (string) (len=10) "production",
     (string) (len=3) "app": (string) (len=10) "static-web",
     (string) (len=9) "component": (string) (len=8) "frontend",
     (string) (len=7) "service": (string) (len=19) "static-web-frontend"
    },
    (string) (len=4) "name": (string) (len=19) "static-web-frontend",
    (string) (len=9) "namespace": (string) (len=3) "web"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=4) {
          (string) (len=8) "replicas": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 78
           }
          },
          (string) (len=8) "selector": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=11) "matchLabels": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=9) "component": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "tier": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=3) "app": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "strategy": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=4) "type": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "template": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=8) "metadata": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=6) "labels": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=3) {
                   (string) (len=3) "app": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   },
                   (string) (len=9) "component": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   },
                   (string) (len=4) "tier": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=4) "spec": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "containers": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=7) {
                      (string) (len=13) "livenessProbe": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=3) {
                         (string) (len=7) "httpGet": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=3) {
                            (string) (len=11) "httpHeaders": (cty.Type) {
                             typeImpl: (cty.typeTuple) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              ElemTypes: ([]cty.Type) (len=1 cap=1) {
                               (cty.Type) {
                                typeImpl: (cty.typeObject) {
                                 typeImplSigil: (cty.typeImplSigil) {
                                 },
                                 AttrTypes: (map[string]cty.Type) (len=2) {
                                  (string) (len=4) "name": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  },
                                  (string) (len=5) "value": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            },
                            (string) (len=4) "path": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=4) "port": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 78
                             }
                            }
                           }
                          }
                         },
                         (string) (len=19) "initialDelaySeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         },
                         (string) (len=13) "periodSeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         }
                        }
                       }
                      },
                      (string) (len=4) "name": (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      },
                      (string) (len=5) "ports": (cty.Type) {
                       typeImpl: (cty.typeTuple) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        ElemTypes: ([]cty.Type) (len=1 cap=1) {
                         (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=3) {
                            (string) (len=13) "containerPort": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 78
                             }
                            },
                            (string) (len=4) "name": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=8) "protocol": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      },
                      (string) (len=14) "readinessProbe": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=3) {
                         (string) (len=7) "httpGet": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=3) {
                            (string) (len=4) "path": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=4) "port": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 78
                             }
                            },
                            (string) (len=11) "httpHeaders": (cty.Type) {
                             typeImpl: (cty.typeTuple) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              ElemTypes: ([]cty.Type) (len=1 cap=1) {
                               (cty.Type) {
                                typeImpl: (cty.typeObject) {
                                 typeImplSigil: (cty.typeImplSigil) {
                                 },
                                 AttrTypes: (map[string]cty.Type) (len=2) {
                                  (string) (len=4) "name": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  },
                                  (string) (len=5) "value": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         },
                         (string) (len=19) "initialDelaySeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         },
                         (string) (len=13) "periodSeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         }
                        }
                       }
                      },
                      (string) (len=9) "resources": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=2) {
                         (string) (len=6) "limits": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=2) {
                            (string) (len=3) "cpu": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=6) "memory": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            }
                           }
                          }
                         },
                         (string) (len=8) "requests": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=2) {
                            (string) (len=6) "memory": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=3) "cpu": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      },
                      (string) (len=4) "args": (cty.Type) {
                       typeImpl: (cty.typeTuple) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        ElemTypes: ([]cty.Type) (len=4 cap=4) {
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         },
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         },
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         },
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         }
                        }
                       }
                      },
                      (string) (len=5) "image": (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=4) {
          (string) (len=8) "selector": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=11) "matchLabels": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=4) "tier": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=3) "app": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=9) "component": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "strategy": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=4) "type": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "template": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=8) "metadata": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=6) "labels": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=3) {
                   (string) (len=3) "app": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   },
                   (string) (len=9) "component": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   },
                   (string) (len=4) "tier": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=4) "spec": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "containers": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.typeObject) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     AttrTypes: (map[string]cty.Type) (len=7) {
                      (string) (len=4) "name": (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      },
                      (string) (len=5) "ports": (cty.Type) {
                       typeImpl: (cty.typeTuple) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        ElemTypes: ([]cty.Type) (len=1 cap=1) {
                         (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=3) {
                            (string) (len=8) "protocol": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=13) "containerPort": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 78
                             }
                            },
                            (string) (len=4) "name": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      },
                      (string) (len=14) "readinessProbe": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=3) {
                         (string) (len=13) "periodSeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         },
                         (string) (len=7) "httpGet": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=3) {
                            (string) (len=4) "path": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=4) "port": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 78
                             }
                            },
                            (string) (len=11) "httpHeaders": (cty.Type) {
                             typeImpl: (cty.typeTuple) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              ElemTypes: ([]cty.Type) (len=1 cap=1) {
                               (cty.Type) {
                                typeImpl: (cty.typeObject) {
                                 typeImplSigil: (cty.typeImplSigil) {
                                 },
                                 AttrTypes: (map[string]cty.Type) (len=2) {
                                  (string) (len=4) "name": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  },
                                  (string) (len=5) "value": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         },
                         (string) (len=19) "initialDelaySeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         }
                        }
                       }
                      },
                      (string) (len=9) "resources": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=2) {
                         (string) (len=6) "limits": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=2) {
                            (string) (len=3) "cpu": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=6) "memory": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            }
                           }
                          }
                         },
                         (string) (len=8) "requests": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=2) {
                            (string) (len=3) "cpu": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=6) "memory": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      },
                      (string) (len=4) "args": (cty.Type) {
                       typeImpl: (cty.typeTuple) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        ElemTypes: ([]cty.Type) (len=4 cap=4) {
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         },
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         },
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         },
                         (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 83
                          }
                         }
                        }
                       }
                      },
                      (string) (len=5) "image": (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      },
                      (string) (len=13) "livenessProbe": (cty.Type) {
                       typeImpl: (cty.typeObject) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        AttrTypes: (map[string]cty.Type) (len=3) {
                         (string) (len=19) "initialDelaySeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         },
                         (string) (len=13) "periodSeconds": (cty.Type) {
                          typeImpl: (cty.primitiveType) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           Kind: (cty.primitiveTypeKind) 78
                          }
                         },
                         (string) (len=7) "httpGet": (cty.Type) {
                          typeImpl: (cty.typeObject) {
                           typeImplSigil: (cty.typeImplSigil) {
                           },
                           AttrTypes: (map[string]cty.Type) (len=3) {
                            (string) (len=11) "httpHeaders": (cty.Type) {
                             typeImpl: (cty.typeTuple) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              ElemTypes: ([]cty.Type) (len=1 cap=1) {
                               (cty.Type) {
                                typeImpl: (cty.typeObject) {
                                 typeImplSigil: (cty.typeImplSigil) {
                                 },
                                 AttrTypes: (map[string]cty.Type) (len=2) {
                                  (string) (len=4) "name": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  },
                                  (string) (len=5) "value": (cty.Type) {
                                   typeImpl: (cty.primitiveType) {
                                    typeImplSigil: (cty.typeImplSigil) {
                                    },
                                    Kind: (cty.primitiveTypeKind) 83
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            },
                            (string) (len=4) "path": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 83
                             }
                            },
                            (string) (len=4) "port": (cty.Type) {
                             typeImpl: (cty.primitiveType) {
                              typeImplSigil: (cty.typeImplSigil) {
                              },
                              Kind: (cty.primitiveTypeKind) 78
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "replicas": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 78
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=7) "apps/v1",
   (string) (len=4) "kind": (string) (len=10) "Deployment",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=3) "web",
    (string) (len=4) "name": (string) (len=8) "frontend"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=4) {
    (string) (len=8) "replicas": (*big.Float)(0xc0032bdb60)(1),
    (string) (len=8) "selector": (map[string]interface {}) (len=1) {
     (string) (len=11) "matchLabels": (map[string]interface {}) (len=3) {
      (string) (len=3) "app": (string) (len=10) "static-web",
      (string) (len=9) "component": (string) (len=8) "frontend",
      (string) (len=4) "tier": (string) (len=10) "production"
     }
    },
    (string) (len=8) "strategy": (map[string]interface {}) (len=1) {
     (string) (len=4) "type": (string) (len=13) "RollingUpdate"
    },
    (string) (len=8) "template": (map[string]interface {}) (len=2) {
     (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
      (string) (len=6) "labels": (map[string]interface {}) (len=3) {
       (string) (len=3) "app": (string) (len=10) "static-web",
       (string) (len=9) "component": (string) (len=8) "frontend",
       (string) (len=4) "tier": (string) (len=10) "production"
      }
     },
     (string) (len=4) "spec": (map[string]interface {}) (len=1) {
      (string) (len=10) "containers": ([]interface {}) (len=1 cap=1) {
       (map[string]interface {}) (len=7) {
        (string) (len=4) "args": ([]interface {}) (len=4 cap=4) {
         (string) (len=10) "--data_dir",
         (string) (len=11) "/data/hosts",
         (string) (len=16) "--enable_logging",
         (string) (len=16) "--enable_tracing"
        },
        (string) (len=5) "image": (string) (len=39) "ghcr.io/dantulovsky/web-static/frontend",
        (string) (len=13) "livenessProbe": (map[string]interface {}) (len=3) {
         (string) (len=7) "httpGet": (map[string]interface {}) (len=3) {
          (string) (len=11) "httpHeaders": ([]interface {}) (len=1 cap=1) {
           (map[string]interface {}) (len=2) {
            (string) (len=4) "name": (string) (len=16) "X-Healthz-Prober",
            (string) (len=5) "value": (string) (len=10) "liveliness"
           }
          },
          (string) (len=4) "path": (string) (len=8) "/healthz",
          (string) (len=4) "port": (*big.Float)(0xc0032bdef0)(8080)
         },
         (string) (len=19) "initialDelaySeconds": (*big.Float)(0xc0032bdf80)(5),
         (string) (len=13) "periodSeconds": (*big.Float)(0xc0032bdfb0)(5)
        },
        (string) (len=4) "name": (string) (len=8) "frontend",
        (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=13) "containerPort": (*big.Float)(0xc003304090)(8080),
          (string) (len=4) "name": (string) (len=4) "http",
          (string) (len=8) "protocol": (string) (len=3) "tcp"
         }
        },
        (string) (len=14) "readinessProbe": (map[string]interface {}) (len=3) {
         (string) (len=13) "periodSeconds": (*big.Float)(0xc003304270)(5),
         (string) (len=7) "httpGet": (map[string]interface {}) (len=3) {
          (string) (len=11) "httpHeaders": ([]interface {}) (len=1 cap=1) {
           (map[string]interface {}) (len=2) {
            (string) (len=4) "name": (string) (len=16) "X-Healthz-Prober",
            (string) (len=5) "value": (string) (len=9) "readiness"
           }
          },
          (string) (len=4) "path": (string) (len=7) "/servez",
          (string) (len=4) "port": (*big.Float)(0xc0033041b0)(8080)
         },
         (string) (len=19) "initialDelaySeconds": (*big.Float)(0xc003304240)(5)
        },
        (string) (len=9) "resources": (map[string]interface {}) (len=2) {
         (string) (len=6) "limits": (map[string]interface {}) (len=2) {
          (string) (len=3) "cpu": (string) (len=3) "0.1",
          (string) (len=6) "memory": (string) (len=4) "20Mi"
         },
         (string) (len=8) "requests": (map[string]interface {}) (len=2) {
          (string) (len=6) "memory": (string) (len=4) "20Mi",
          (string) (len=3) "cpu": (string) (len=3) "0.1"
         }
        }
       }
      }
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=4) {
    (string) (len=8) "strategy": (map[string]interface {}) (len=1) {
     (string) (len=4) "type": (string) (len=13) "RollingUpdate"
    },
    (string) (len=8) "template": (map[string]interface {}) (len=2) {
     (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
      (string) (len=6) "labels": (map[string]interface {}) (len=3) {
       (string) (len=3) "app": (string) (len=10) "static-web",
       (string) (len=9) "component": (string) (len=8) "frontend",
       (string) (len=4) "tier": (string) (len=10) "production"
      }
     },
     (string) (len=4) "spec": (map[string]interface {}) (len=1) {
      (string) (len=10) "containers": ([]interface {}) (len=1 cap=1) {
       (map[string]interface {}) (len=7) {
        (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=13) "containerPort": (*big.Float)(0xc003305f20)(8080),
          (string) (len=4) "name": (string) (len=4) "http",
          (string) (len=8) "protocol": (string) (len=3) "tcp"
         }
        },
        (string) (len=14) "readinessProbe": (map[string]interface {}) (len=3) {
         (string) (len=7) "httpGet": (map[string]interface {}) (len=3) {
          (string) (len=11) "httpHeaders": ([]interface {}) (len=1 cap=1) {
           (map[string]interface {}) (len=2) {
            (string) (len=4) "name": (string) (len=16) "X-Healthz-Prober",
            (string) (len=5) "value": (string) (len=9) "readiness"
           }
          },
          (string) (len=4) "path": (string) (len=7) "/servez",
          (string) (len=4) "port": (*big.Float)(0xc003350060)(8080)
         },
         (string) (len=19) "initialDelaySeconds": (*big.Float)(0xc0033500f0)(5),
         (string) (len=13) "periodSeconds": (*big.Float)(0xc003350120)(5)
        },
        (string) (len=9) "resources": (map[string]interface {}) (len=2) {
         (string) (len=6) "limits": (map[string]interface {}) (len=2) {
          (string) (len=3) "cpu": (string) (len=3) "0.1",
          (string) (len=6) "memory": (string) (len=4) "20Mi"
         },
         (string) (len=8) "requests": (map[string]interface {}) (len=2) {
          (string) (len=3) "cpu": (string) (len=3) "0.1",
          (string) (len=6) "memory": (string) (len=4) "20Mi"
         }
        },
        (string) (len=4) "args": ([]interface {}) (len=4 cap=4) {
         (string) (len=10) "--data_dir",
         (string) (len=11) "/data/hosts",
         (string) (len=16) "--enable_logging",
         (string) (len=16) "--enable_tracing"
        },
        (string) (len=5) "image": (string) (len=39) "ghcr.io/dantulovsky/web-static/frontend",
        (string) (len=13) "livenessProbe": (map[string]interface {}) (len=3) {
         (string) (len=7) "httpGet": (map[string]interface {}) (len=3) {
          (string) (len=4) "port": (*big.Float)(0xc003305da0)(8080),
          (string) (len=11) "httpHeaders": ([]interface {}) (len=1 cap=1) {
           (map[string]interface {}) (len=2) {
            (string) (len=4) "name": (string) (len=16) "X-Healthz-Prober",
            (string) (len=5) "value": (string) (len=10) "liveliness"
           }
          },
          (string) (len=4) "path": (string) (len=8) "/healthz"
         },
         (string) (len=19) "initialDelaySeconds": (*big.Float)(0xc003305e30)(5),
         (string) (len=13) "periodSeconds": (*big.Float)(0xc003305e60)(5)
        },
        (string) (len=4) "name": (string) (len=8) "frontend"
       }
      }
     }
    },
    (string) (len=8) "replicas": (*big.Float)(0xc003305a10)(1),
    (string) (len=8) "selector": (map[string]interface {}) (len=1) {
     (string) (len=11) "matchLabels": (map[string]interface {}) (len=3) {
      (string) (len=4) "tier": (string) (len=10) "production",
      (string) (len=3) "app": (string) (len=10) "static-web",
      (string) (len=9) "component": (string) (len=8) "frontend"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=7) "apps/v1",
   (string) (len=4) "kind": (string) (len=10) "Deployment",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=3) "web",
    (string) (len=4) "name": (string) (len=8) "frontend"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc00000e698)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=4) "kind": (string) (len=7) "Service",
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=9) {
   (string) (len=6) "labels": (map[string]interface {}) (len=4) {
    (string) (len=3) "app": (string) (len=10) "static-web",
    (string) (len=9) "component": (string) (len=8) "frontend",
    (string) (len=7) "service": (string) (len=19) "static-web-frontend",
    (string) (len=4) "tier": (string) (len=10) "production"
   },
   (string) (len=11) "annotations": (map[string]interface {}) (len=2) {
    (string) (len=20) "cloud.google.com/neg": (string) (len=16) "{\"ingress\":true}",
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=441) "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"static-web\",\"component\":\"frontend\",\"service\":\"static-web-frontend\",\"tier\":\"production\"},\"name\":\"static-web-frontend\",\"namespace\":\"web\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":8080,\"protocol\":\"TCP\",\"targetPort\":\"http\"}],\"selector\":{\"app\":\"static-web\",\"component\":\"frontend\",\"tier\":\"production\"},\"sessionAffinity\":\"None\",\"type\":\"ClusterIP\"}}\n"
   },
   (string) (len=13) "managedFields": ([]interface {}) (len=2 cap=2) {
    (map[string]interface {}) (len=6) {
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-05T19:15:34Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=8) "f:labels": (map[string]interface {}) (len=4) {
        (string) (len=5) "f:app": (map[string]interface {}) {
        },
        (string) (len=11) "f:component": (map[string]interface {}) {
        },
        (string) (len=9) "f:service": (map[string]interface {}) {
        },
        (string) (len=6) "f:tier": (map[string]interface {}) {
        }
       }
      },
      (string) (len=6) "f:spec": (map[string]interface {}) (len=5) {
       (string) (len=10) "f:selector": (map[string]interface {}) (len=3) {
        (string) (len=6) "f:tier": (map[string]interface {}) {
        },
        (string) (len=5) "f:app": (map[string]interface {}) {
        },
        (string) (len=11) "f:component": (map[string]interface {}) {
        }
       },
       (string) (len=17) "f:sessionAffinity": (map[string]interface {}) {
       },
       (string) (len=6) "f:type": (map[string]interface {}) {
       },
       (string) (len=11) "f:clusterIP": (map[string]interface {}) {
       },
       (string) (len=7) "f:ports": (map[string]interface {}) (len=1) {
        (string) (len=32) "k:{\"port\":8080,\"protocol\":\"TCP\"}": (map[string]interface {}) (len=5) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=6) "f:port": (map[string]interface {}) {
         },
         (string) (len=10) "f:protocol": (map[string]interface {}) {
         },
         (string) (len=12) "f:targetPort": (map[string]interface {}) {
         }
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform"
    },
    (map[string]interface {}) (len=6) {
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2021-03-02T20:58:14Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=2) {
       (string) (len=13) "f:annotations": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=50) "f:kubectl.kubernetes.io/last-applied-configuration": (map[string]interface {}) {
        }
       },
       (string) (len=8) "f:labels": (map[string]interface {}) (len=5) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=5) "f:app": (map[string]interface {}) {
        },
        (string) (len=11) "f:component": (map[string]interface {}) {
        },
        (string) (len=9) "f:service": (map[string]interface {}) {
        },
        (string) (len=6) "f:tier": (map[string]interface {}) {
        }
       }
      },
      (string) (len=6) "f:spec": (map[string]interface {}) (len=5) {
       (string) (len=11) "f:clusterIP": (map[string]interface {}) {
       },
       (string) (len=7) "f:ports": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=32) "k:{\"port\":8080,\"protocol\":\"TCP\"}": (map[string]interface {}) (len=5) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=6) "f:port": (map[string]interface {}) {
         },
         (string) (len=10) "f:protocol": (map[string]interface {}) {
         },
         (string) (len=12) "f:targetPort": (map[string]interface {}) {
         }
        }
       },
       (string) (len=10) "f:selector": (map[string]interface {}) (len=4) {
        (string) (len=5) "f:app": (map[string]interface {}) {
        },
        (string) (len=11) "f:component": (map[string]interface {}) {
        },
        (string) (len=6) "f:tier": (map[string]interface {}) {
        },
        (string) (len=1) ".": (map[string]interface {}) {
        }
       },
       (string) (len=17) "f:sessionAffinity": (map[string]interface {}) {
       },
       (string) (len=6) "f:type": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=25) "kubectl-client-side-apply",
     (string) (len=9) "operation": (string) (len=6) "Update"
    }
   },
   (string) (len=4) "name": (string) (len=19) "static-web-frontend",
   (string) (len=9) "namespace": (string) (len=3) "web",
   (string) (len=8) "selfLink": (string) (len=51) "/api/v1/namespaces/web/services/static-web-frontend",
   (string) (len=3) "uid": (string) (len=36) "0a94f90e-8c2e-4944-803a-7ee3f0ecee49",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-03-02T20:58:14Z",
   (string) (len=15) "resourceVersion": (string) (len=7) "1982425"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=5) {
   (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=4) {
     (string) (len=4) "name": (string) (len=4) "http",
     (string) (len=8) "protocol": (string) (len=3) "TCP",
     (string) (len=4) "port": (int64) 8080,
     (string) (len=10) "targetPort": (string) (len=4) "http"
    }
   },
   (string) (len=8) "selector": (map[string]interface {}) (len=3) {
    (string) (len=3) "app": (string) (len=10) "static-web",
    (string) (len=9) "component": (string) (len=8) "frontend",
    (string) (len=4) "tier": (string) (len=10) "production"
   },
   (string) (len=9) "clusterIP": (string) (len=4) "None",
   (string) (len=4) "type": (string) (len=9) "ClusterIP",
   (string) (len=15) "sessionAffinity": (string) (len=4) "None"
  },
  (string) (len=6) "status": (map[string]interface {}) (len=1) {
   (string) (len=12) "loadBalancer": (map[string]interface {}) {
   }
  }
 }
})

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=5) {
       (string) (len=4) "type": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "clusterIP": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=5) "ports": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=4) "port": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=8) "protocol": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=10) "targetPort": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "name": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=8) "selector": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=9) "component": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "tier": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=3) "app": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=15) "sessionAffinity": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=6) "labels": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=4) {
          (string) (len=7) "service": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "tier": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=3) "app": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "component": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=11) "annotations": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=20) "cloud.google.com/neg": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "spec": (map[string]interface {}) (len=5) {
   (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=4) {
     (string) (len=8) "protocol": (string) (len=3) "TCP",
     (string) (len=10) "targetPort": (string) (len=4) "http",
     (string) (len=4) "name": (string) (len=4) "http",
     (string) (len=4) "port": (*big.Float)(0xc0033e0660)(8080)
    }
   },
   (string) (len=8) "selector": (map[string]interface {}) (len=3) {
    (string) (len=3) "app": (string) (len=10) "static-web",
    (string) (len=9) "component": (string) (len=8) "frontend",
    (string) (len=4) "tier": (string) (len=10) "production"
   },
   (string) (len=15) "sessionAffinity": (string) (len=4) "None",
   (string) (len=4) "type": (string) (len=9) "ClusterIP",
   (string) (len=9) "clusterIP": (string) (len=4) "None"
  },
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "kind": (string) (len=7) "Service",
  (string) (len=8) "metadata": (map[string]interface {}) (len=4) {
   (string) (len=4) "name": (string) (len=19) "static-web-frontend",
   (string) (len=9) "namespace": (string) (len=3) "web",
   (string) (len=11) "annotations": (map[string]interface {}) (len=2) {
    (string) (len=20) "cloud.google.com/neg": (string) (len=16) "{\"ingress\":true}",
    (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=441) "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"static-web\",\"component\":\"frontend\",\"service\":\"static-web-frontend\",\"tier\":\"production\"},\"name\":\"static-web-frontend\",\"namespace\":\"web\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":8080,\"protocol\":\"TCP\",\"targetPort\":\"http\"}],\"selector\":{\"app\":\"static-web\",\"component\":\"frontend\",\"tier\":\"production\"},\"sessionAffinity\":\"None\",\"type\":\"ClusterIP\"}}\n"
   },
   (string) (len=6) "labels": (map[string]interface {}) (len=4) {
    (string) (len=9) "component": (string) (len=8) "frontend",
    (string) (len=7) "service": (string) (len=19) "static-web-frontend",
    (string) (len=4) "tier": (string) (len=10) "production",
    (string) (len=3) "app": (string) (len=10) "static-web"
   }
  }
 }
}

RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=4) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=20) "cloud.google.com/neg": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=6) "labels": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "service": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=5) {
          (string) (len=9) "clusterIP": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=5) "ports": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=10) "targetPort": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=8) "protocol": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "selector": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=15) "sessionAffinity": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "type": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=6) "labels": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=7) "service": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=5) {
          (string) (len=5) "ports": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=8) "protocol": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=10) "targetPort": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=4) "port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "selector": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=9) "component": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=4) "tier": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=3) "app": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=15) "sessionAffinity": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "type": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "clusterIP": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=4) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=2) {
     (string) (len=20) "cloud.google.com/neg": (string) (len=16) "{\"ingress\":true}",
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=441) "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"static-web\",\"component\":\"frontend\",\"service\":\"static-web-frontend\",\"tier\":\"production\"},\"name\":\"static-web-frontend\",\"namespace\":\"web\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":8080,\"protocol\":\"TCP\",\"targetPort\":\"http\"}],\"selector\":{\"app\":\"static-web\",\"component\":\"frontend\",\"tier\":\"production\"},\"sessionAffinity\":\"None\",\"type\":\"ClusterIP\"}}\n"
    },
    (string) (len=6) "labels": (map[string]interface {}) (len=4) {
     (string) (len=9) "component": (string) (len=8) "frontend",
     (string) (len=7) "service": (string) (len=19) "static-web-frontend",
     (string) (len=4) "tier": (string) (len=10) "production",
     (string) (len=3) "app": (string) (len=10) "static-web"
    },
    (string) (len=4) "name": (string) (len=19) "static-web-frontend",
    (string) (len=9) "namespace": (string) (len=3) "web"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=5) {
    (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=4) {
      (string) (len=8) "protocol": (string) (len=3) "TCP",
      (string) (len=10) "targetPort": (string) (len=4) "http",
      (string) (len=4) "name": (string) (len=4) "http",
      (string) (len=4) "port": (*big.Float)(0xc0033e0660)(8080)
     }
    },
    (string) (len=8) "selector": (map[string]interface {}) (len=3) {
     (string) (len=4) "tier": (string) (len=10) "production",
     (string) (len=3) "app": (string) (len=10) "static-web",
     (string) (len=9) "component": (string) (len=8) "frontend"
    },
    (string) (len=15) "sessionAffinity": (string) (len=4) "None",
    (string) (len=4) "type": (string) (len=9) "ClusterIP",
    (string) (len=9) "clusterIP": (string) (len=4) "None"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=7) "Service"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=7) "Service",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=6) "labels": (map[string]interface {}) (len=4) {
     (string) (len=3) "app": (string) (len=10) "static-web",
     (string) (len=9) "component": (string) (len=8) "frontend",
     (string) (len=7) "service": (string) (len=19) "static-web-frontend",
     (string) (len=4) "tier": (string) (len=10) "production"
    },
    (string) (len=4) "name": (string) (len=19) "static-web-frontend",
    (string) (len=9) "namespace": (string) (len=3) "web"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=5) {
    (string) (len=5) "ports": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=4) {
      (string) (len=4) "port": (*big.Float)(0xc00397db00)(8080),
      (string) (len=8) "protocol": (string) (len=3) "TCP",
      (string) (len=10) "targetPort": (string) (len=4) "http",
      (string) (len=4) "name": (string) (len=4) "http"
     }
    },
    (string) (len=8) "selector": (map[string]interface {}) (len=3) {
     (string) (len=9) "component": (string) (len=8) "frontend",
     (string) (len=4) "tier": (string) (len=10) "production",
     (string) (len=3) "app": (string) (len=10) "static-web"
    },
    (string) (len=15) "sessionAffinity": (string) (len=4) "None",
    (string) (len=4) "type": (string) (len=9) "ClusterIP",
    (string) (len=9) "clusterIP": (string) (len=4) "None"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  }
 }
}
RAW provider 2021/03/05 14:15:34 [ApplyResourceChange][Create] Error: (*errors.StatusError)(0xc0004968c0)(Apply failed with 2 conflicts: conflicts with "kubectl-client-side-apply" using apps/v1:
- .spec.template.spec.containers[name="frontend"].resources.requests.cpu
- .spec.template.spec.containers[name="frontend"].resources.requests.cpu)

(*unstructured.Unstructured)(<nil>)

RAW provider 2021/03/05 14:15:34 Finished
RAW provider 2021/03/05 14:35:18 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:35:18 Finished
RAW provider 2021/03/05 14:37:23 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:37:23 Finished
RAW provider 2021/03/05 14:37:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:37:33 Finished
RAW provider 2021/03/05 14:38:34 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:38:34 Finished
RAW provider 2021/03/05 14:38:36 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:38:36 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:38:40 Finished
RAW provider 2021/03/05 14:40:23 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:40:23 Finished
RAW provider 2021/03/05 14:40:35 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:40:35 Finished
RAW provider 2021/03/05 14:40:40 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:40:40 Finished
RAW provider 2021/03/05 14:40:51 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:40:51 Finished
RAW provider 2021/03/05 14:40:53 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:40:53 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:40:57 Finished
RAW provider 2021/03/05 14:41:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:41:05 Finished
RAW provider 2021/03/05 14:41:14 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:41:14 Finished
RAW provider 2021/03/05 14:41:15 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:41:16 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:41:20 Finished
RAW provider 2021/03/05 14:41:24 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:41:25 Finished
RAW provider 2021/03/05 14:41:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:41:27 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:41:30 Finished
RAW provider 2021/03/05 14:41:34 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:41:34 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:41:35 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 14:41:35 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
    },
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}

RAW provider 2021/03/05 14:41:35 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 14:41:43 Finished
RAW provider 2021/03/05 14:42:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:42:05 Finished
RAW provider 2021/03/05 14:42:07 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:42:07 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:42:10 Finished
RAW provider 2021/03/05 14:42:37 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:42:37 Finished
RAW provider 2021/03/05 14:42:39 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 14:42:39 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 14:42:42 Finished
RAW provider 2021/03/05 15:39:17 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:39:17 Finished
RAW provider 2021/03/05 15:40:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:40:06 Finished
RAW provider 2021/03/05 15:40:08 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:40:08 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:40:11 Finished
RAW provider 2021/03/05 15:41:29 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:41:29 Finished
RAW provider 2021/03/05 15:41:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:41:30 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:41:33 Finished
RAW provider 2021/03/05 15:41:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:41:52 Finished
RAW provider 2021/03/05 15:41:54 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:41:54 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:41:57 Finished
RAW provider 2021/03/05 15:42:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:42:05 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:42:05 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 15:42:05 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
    },
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}

RAW provider 2021/03/05 15:42:05 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 15:42:05 Finished
RAW provider 2021/03/05 15:42:23 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:42:23 Finished
RAW provider 2021/03/05 15:42:24 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:42:25 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:42:28 Finished
RAW provider 2021/03/05 15:42:32 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:42:32 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:42:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 15:42:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
    },
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  }
 }
}

RAW provider 2021/03/05 15:42:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 15:42:32 Finished
RAW provider 2021/03/05 15:43:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:43:04 Finished
RAW provider 2021/03/05 15:43:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:43:06 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:43:09 Finished
RAW provider 2021/03/05 15:43:16 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:43:16 Finished
RAW provider 2021/03/05 15:43:18 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:43:18 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:43:21 Finished
RAW provider 2021/03/05 15:43:32 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:43:32 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.224.245.141", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x4d, 0x48, 0x6e, 0x44, 0x4e, 0x73, 0x38, 0x4d, 0x67, 0x72, 0x63, 0x76, 0x34, 0x77, 0x4e, 0x34, 0x55, 0x73, 0x64, 0x41, 0x72, 0x77, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x6a, 0x45, 0x35, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4d, 0x7a, 0x59, 0x77, 0x4e, 0x56, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x5a, 0x6d, 0x49, 0x34, 0xa, 0x4e, 0x7a, 0x56, 0x6d, 0x4e, 0x6d, 0x49, 0x74, 0x5a, 0x6d, 0x4a, 0x6b, 0x5a, 0x43, 0x30, 0x30, 0x5a, 0x44, 0x41, 0x35, 0x4c, 0x57, 0x4a, 0x6c, 0x4e, 0x54, 0x4d, 0x74, 0x5a, 0x57, 0x51, 0x34, 0x4e, 0x57, 0x4e, 0x6c, 0x4d, 0x47, 0x4e, 0x68, 0x4d, 0x6a, 0x59, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x54, 0x33, 0x6d, 0x6e, 0x4a, 0x4a, 0x37, 0x4c, 0x47, 0x32, 0x5a, 0x78, 0x6b, 0x34, 0x63, 0x30, 0x39, 0x48, 0x72, 0x35, 0x72, 0x39, 0x77, 0x64, 0x37, 0x4b, 0x30, 0x7a, 0x33, 0x65, 0x48, 0x6e, 0x72, 0x4e, 0x41, 0x55, 0x4f, 0x4f, 0x65, 0xa, 0x4c, 0x37, 0x7a, 0x64, 0x7a, 0x59, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x69, 0x34, 0x43, 0x77, 0x6a, 0x58, 0x4d, 0x6c, 0x68, 0x79, 0x6f, 0x4e, 0x65, 0x56, 0x37, 0x37, 0x73, 0x62, 0x32, 0x2f, 0x35, 0x79, 0x6b, 0x32, 0x36, 0x74, 0x34, 0x64, 0x57, 0x58, 0x65, 0x62, 0x56, 0x34, 0x69, 0x71, 0x63, 0x46, 0x36, 0x46, 0x59, 0x77, 0x48, 0x70, 0x62, 0x34, 0x55, 0x58, 0x65, 0x42, 0x55, 0x5a, 0x34, 0xa, 0x32, 0x64, 0x79, 0x62, 0x41, 0x52, 0x35, 0x36, 0x72, 0x70, 0x74, 0x5a, 0x71, 0x4c, 0x67, 0x35, 0x33, 0x38, 0x5a, 0x4c, 0x6c, 0x66, 0x66, 0x7a, 0x41, 0x4d, 0x4f, 0x55, 0x6a, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x47, 0x45, 0x57, 0x69, 0x73, 0x33, 0x2b, 0x4a, 0x6f, 0x61, 0x36, 0x4c, 0x66, 0x51, 0x45, 0x41, 0x75, 0x6b, 0x75, 0x43, 0x2b, 0x6c, 0x6d, 0x33, 0x55, 0x35, 0x74, 0x6b, 0x59, 0x63, 0xa, 0x49, 0x34, 0x79, 0x6c, 0x6f, 0x44, 0x52, 0x36, 0x75, 0x62, 0x58, 0x46, 0x6e, 0x47, 0x70, 0x6b, 0x57, 0x65, 0x73, 0x70, 0x70, 0x48, 0x54, 0x57, 0x47, 0x66, 0x41, 0x62, 0x4f, 0x51, 0x6d, 0x61, 0x4f, 0x68, 0x41, 0x53, 0x4d, 0x36, 0x4a, 0x66, 0x39, 0x39, 0x70, 0x37, 0x45, 0x6e, 0x6e, 0x30, 0x57, 0x38, 0x77, 0x43, 0x41, 0x58, 0x53, 0x62, 0x31, 0x52, 0x69, 0x53, 0x44, 0x5a, 0x44, 0x35, 0xa, 0x53, 0x79, 0x63, 0x73, 0x76, 0x65, 0x51, 0x66, 0x43, 0x30, 0x48, 0x4f, 0x55, 0x5a, 0x4c, 0x64, 0x61, 0x49, 0x34, 0x54, 0x71, 0x47, 0x68, 0x57, 0x6b, 0x76, 0x73, 0x47, 0x5a, 0x52, 0x36, 0x71, 0x73, 0x71, 0x4a, 0x2b, 0x79, 0x34, 0x54, 0x6b, 0x59, 0x78, 0x6c, 0x6d, 0x6b, 0x71, 0x4f, 0x7a, 0x4f, 0x49, 0x56, 0x5a, 0x6c, 0x32, 0x65, 0x76, 0x69, 0x63, 0x2f, 0x57, 0x4d, 0x46, 0x48, 0x50, 0xa, 0x2b, 0x77, 0x37, 0x79, 0x56, 0x55, 0x6b, 0x6e, 0x6d, 0x77, 0x45, 0x39, 0x6e, 0x57, 0x41, 0x6d, 0x45, 0x78, 0x39, 0x6a, 0x7a, 0x4a, 0x47, 0x59, 0x59, 0x44, 0x7a, 0x4f, 0x69, 0x73, 0x41, 0x6b, 0x72, 0x4b, 0x6e, 0x79, 0x4f, 0x74, 0x73, 0x70, 0x4f, 0x69, 0x39, 0x2f, 0x53, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x53, 0x63, 0x61, 0x41, 0x77, 0x58, 0x46, 0x78, 0x71, 0x49, 0x2f, 0x6f, 0xa, 0x6d, 0x63, 0x35, 0x39, 0x72, 0x69, 0x79, 0x76, 0x4d, 0x66, 0x45, 0x73, 0x32, 0x34, 0x34, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x45, 0x79, 0x55, 0x76, 0x54, 0x62, 0x33, 0x30, 0x78, 0x44, 0x6e, 0x36, 0x6d, 0x48, 0x7a, 0x59, 0x59, 0x38, 0x6f, 0x77, 0x55, 0x33, 0x39, 0xa, 0x69, 0x6b, 0x37, 0x4e, 0x54, 0x5a, 0x4c, 0x75, 0x37, 0x77, 0x56, 0x77, 0x51, 0x44, 0x4e, 0x37, 0x62, 0x69, 0x47, 0x78, 0x6c, 0x52, 0x4b, 0x76, 0x50, 0x33, 0x77, 0x58, 0x46, 0x30, 0x61, 0x48, 0x58, 0x53, 0x2f, 0x43, 0x69, 0x65, 0x79, 0x38, 0x79, 0x59, 0x65, 0x2f, 0x6d, 0x48, 0x43, 0x52, 0x6a, 0x4e, 0x52, 0x50, 0x4a, 0x56, 0x59, 0x45, 0x31, 0x6f, 0x6d, 0x65, 0x71, 0x66, 0x62, 0x48, 0xa, 0x48, 0x63, 0x37, 0x44, 0x77, 0x6b, 0x33, 0x55, 0x31, 0x59, 0x72, 0x53, 0x4d, 0x2b, 0x63, 0x59, 0x46, 0x42, 0x4c, 0x62, 0x53, 0x2b, 0x6f, 0x71, 0x47, 0x54, 0x4d, 0x49, 0x36, 0x31, 0x6a, 0x55, 0x63, 0x76, 0x70, 0x51, 0x46, 0x6c, 0x6f, 0x74, 0x31, 0x48, 0x6a, 0x4a, 0x43, 0x4a, 0x6a, 0x77, 0x31, 0x55, 0x58, 0x4a, 0x47, 0x44, 0x56, 0x50, 0x6a, 0x36, 0x62, 0x6f, 0x56, 0x34, 0x39, 0x2b, 0xa, 0x75, 0x45, 0x78, 0x32, 0x64, 0x70, 0x4a, 0x54, 0x32, 0x39, 0x6d, 0x63, 0x75, 0x33, 0x31, 0x2b, 0x74, 0x7a, 0x6c, 0x6e, 0x4a, 0x54, 0x2f, 0x4b, 0x46, 0x4c, 0x65, 0x70, 0x75, 0x78, 0x74, 0x75, 0x79, 0x61, 0x33, 0x4f, 0x30, 0x4d, 0x45, 0x56, 0x41, 0x69, 0x71, 0x4f, 0x46, 0x34, 0x56, 0x66, 0x74, 0x33, 0x61, 0x52, 0x67, 0x62, 0x59, 0x67, 0x39, 0x42, 0x74, 0x6c, 0x38, 0x50, 0x43, 0x70, 0xa, 0x31, 0x76, 0x6a, 0x53, 0x66, 0x34, 0x37, 0x31, 0x51, 0x51, 0x59, 0x70, 0x2b, 0x37, 0x5a, 0x64, 0x74, 0x6a, 0x67, 0x68, 0x38, 0x78, 0x47, 0x4c, 0x30, 0x61, 0x5a, 0x66, 0x35, 0x49, 0x69, 0x4b, 0x4c, 0x30, 0x67, 0x68, 0x5a, 0x46, 0x33, 0x33, 0x65, 0x4c, 0x6e, 0x4a, 0x77, 0x66, 0x4e, 0x2f, 0x62, 0x72, 0x31, 0x58, 0x59, 0x70, 0x5a, 0x39, 0x34, 0x43, 0x78, 0x41, 0x36, 0x49, 0x62, 0x47, 0xa, 0x53, 0x64, 0x50, 0x57, 0x67, 0x71, 0x59, 0x66, 0x6d, 0x7a, 0x61, 0x50, 0x41, 0x56, 0x2f, 0x52, 0x41, 0x4b, 0x48, 0x4e, 0x32, 0x37, 0x49, 0x50, 0x6c, 0x73, 0x33, 0x56, 0x6b, 0x66, 0x53, 0x56, 0x47, 0x36, 0x43, 0x2f, 0x4a, 0x37, 0x77, 0x65, 0x5a, 0x6b, 0x6b, 0x45, 0x6a, 0x63, 0x76, 0x4a, 0x32, 0x54, 0x68, 0x6d, 0x57, 0x6d, 0x49, 0x4c, 0x71, 0x70, 0x62, 0x68, 0x45, 0x64, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/03/05 15:43:32 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/03/05 15:43:32 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "annotations": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=11) "annotations": (map[string]interface {}) (len=1) {
     (string) (len=48) "kubectl.kubernetes.io/last-applied-configuration": (string) (len=86) "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"annotations\":{},\"name\":\"default\"}}\n"
    },
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=10) "kubernetes"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=3) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=1) {
    (string) (len=4) "name": (string) (len=7) "default"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "kind": (string) (len=9) "Namespace"
  }
 }
}

RAW provider 2021/03/05 15:43:32 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/03/05 15:43:33 Finished
RAW provider 2021/03/05 15:44:08 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:44:08 Finished
RAW provider 2021/03/05 15:45:20 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/03/05 15:45:20 Finished
