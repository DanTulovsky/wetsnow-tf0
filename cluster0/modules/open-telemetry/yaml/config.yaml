receivers:
  otlp:
    protocols:
      grpc:
      http:
  opencensus:
  jaeger:
    protocols:
      grpc:
      thrift_http:
      thrift_compact:
      thrift_binary:
    remote_sampling:
      strategy_file: "/etc/jaeger/jaeger-sampling-config.json"
      # Doesn't work
      # fetch_endpoint: "jaeger-collector.observability:5778"
  zipkin:
  # prometheus:
  #   config:
  #     - job_name: ambassador/ambassador/0
  #       honor_labels: false
  #       kubernetes_sd_configs:
  #       - role: endpoints
  #         namespaces:
  #           names:
  #           - ambassador
  #       metrics_path: /metrics
  #       relabel_configs:
  #       - action: keep
  #         source_labels:
  #         - __meta_kubernetes_service_label_service
  #         regex: ambassador-admin
  #       - action: keep
  #         source_labels:
  #         - __meta_kubernetes_endpoint_port_name
  #         regex: ambassador-admin
  #       - source_labels:
  #         - __meta_kubernetes_endpoint_address_target_kind
  #         - __meta_kubernetes_endpoint_address_target_name
  #         separator: ;
  #         regex: Node;(.*)
  #         replacement: $${1}
  #         target_label: node
  #       - source_labels:
  #         - __meta_kubernetes_endpoint_address_target_kind
  #         - __meta_kubernetes_endpoint_address_target_name
  #         separator: ;
  #         regex: Pod;(.*)
  #         replacement: $${1}
  #         target_label: pod
  #       - source_labels:
  #         - __meta_kubernetes_namespace
  #         target_label: namespace
  #       - source_labels:
  #         - __meta_kubernetes_service_name
  #         target_label: service
  #       - source_labels:
  #         - __meta_kubernetes_pod_name
  #         target_label: pod
  #       - source_labels:
  #         - __meta_kubernetes_pod_container_name
  #         target_label: container
  #       - source_labels:
  #         - __meta_kubernetes_service_name
  #         target_label: job
  #         replacement: $${1}
  #       - target_label: endpoint
  #         replacement: ambassador-admin
  #       - source_labels:
  #         - __address__
  #         target_label: __tmp_hash
  #         modulus: 1
  #         action: hashmod
  #       - source_labels:
  #         - __tmp_hash
  #         regex: 0
  #         action: keep
  # k8s_cluster:
  # auth_type: "serviceAccount"
  # collection_interval: 10s
  # node_conditions_to_report: [Ready, MemoryPressure, DiskPressure, PIDPressure, NetworkUnavailable]
processors:
  batch:
  memory_limiter:
    # Same as --mem-ballast-size-mib CLI argument
    # ballast_size_mib: 128
    # 80% of maximum memory up to 2G
    limit_mib: 450
    # 25% of limit up to 2G
    spike_limit_mib: 128
    check_interval: 5s
  k8s_tagger:
    passthrough: true
extensions:
  health_check: {}
  # https://github.com/open-telemetry/opentelemetry-specification/blob/main/experimental/trace/zpages.md
  zpages: {}
  pprof: {}
exporters:
  otlp/lightstep:
    endpoint: "ingest.lightstep.com:443"
    headers: {"lightstep-access-token": ${lightstepAccessToken}}
  # jaeger_thrift:
  #   url: "http://jaeger-collector.observability:14268/api/traces"
  logging:
    loglevel: info
  kafka:
    protocol_version: 2.0.0
    brokers:
      - "kafka0-headless.kafka:9092"
service:
  extensions: [health_check, zpages, pprof]
  pipelines:
    metrics:
      receivers: [otlp, opencensus]
      processors: [memory_limiter, batch]
      exporters: [otlp/lightstep]
    traces/1:
      receivers: [otlp, zipkin, jaeger]
      processors: [memory_limiter, batch, k8s_tagger]
      exporters: [otlp/lightstep]
